{"version":3,"sources":["components/Scoreboard.js","components/Header.js","components/SymbolContainer.js","components/MainContainer.js","components/GameOver.js","components/Footer.js","App.js","index.js"],"names":["Scoreboard","props","className","score","bestScore","Header","SymbolContainer","currentSymbolArray","setCurrentArray","usedSymbolArray","setUsedArray","setGameOver","setTotalSymbolArray","map","item","onClick","oldArray","randomIndex","currentIndex","length","Math","floor","random","indexOf","uniqid","MainContainer","level","GameOver","setScore","setLevel","Footer","href","rel","target","App","useState","totalSymbolArray","gameOver","setBestScore","symbolArray","useEffect","getRandomElement","randomElement","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed1caa26.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Scoreboard(props) {\n  return (\n    <div className=\"scoreboard\">\n      <h4>Score: {props.score}</h4>\n      <span>|</span>\n      <h4>Best Score: {props.bestScore}</h4>\n    </div>\n  );\n}\n\nexport default Scoreboard;\n","import React from 'react'\nimport Scoreboard from './Scoreboard'\n\nfunction Header(props) {\n  return (\n    <header>\n      <h1>Symbol Memory Game</h1>\n      <Scoreboard bestScore={props.bestScore} score={props.score}/>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react';\nimport uniqid from 'uniqid';\n\nfunction SymbolContainer(props) {\n  const {\n    currentSymbolArray,\n    setCurrentArray,\n    usedSymbolArray,\n    setUsedArray,\n    setGameOver,\n    setTotalSymbolArray,\n  } = props;\n\n  const shuffle = () => {\n    setCurrentArray((oldArray) => {\n      let currentIndex = oldArray.length,\n        randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        [oldArray[currentIndex], oldArray[randomIndex]] = [\n          oldArray[randomIndex],\n          oldArray[currentIndex],\n        ];\n      }\n      return oldArray;\n    });\n  };\n\n  return (\n    <div className=\"symbol-container\">\n      {currentSymbolArray.map((item) => {\n        return (\n          <div\n            key={uniqid()}\n            className=\"symbol-item\"\n            onClick={() => {\n              shuffle();\n              if (usedSymbolArray.indexOf(item) === -1) {\n                setUsedArray((oldArray) => [...oldArray, item]);\n                setTotalSymbolArray((oldArray) => [...oldArray, item]);\n              } else {\n                setGameOver(true);\n              }\n            }}\n          >\n            {item}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default SymbolContainer;\n","import React from 'react';\nimport SymbolContainer from './SymbolContainer';\n\nfunction MainContainer(props) {\n  return (\n    <div className=\"main-container\">\n      <div className=\"level-container\">\n        <h3>Choose your next symbol! Level {props.level}</h3>\n      </div>\n      <SymbolContainer\n        currentSymbolArray={props.currentSymbolArray}\n        setCurrentArray={props.setCurrentArray}\n        usedSymbolArray={props.usedSymbolArray}\n        setUsedArray={props.setUsedArray}\n        setGameOver={props.setGameOver}\n        setTotalSymbolArray={props.setTotalSymbolArray}\n      />\n    </div>\n  );\n}\n\nexport default MainContainer;\n","import React from 'react';\n\nfunction GameOver(props) {\n  const { setGameOver, setScore, score, setUsedArray, setCurrentArray, setTotalSymbolArray, setLevel } = props;\n  return (\n    <div className=\"game-over-screen\">\n      <div>\n        <h1>Game Over!</h1>\n        <h3>Score: {score}</h3>\n        <button\n          onClick={() => {\n            setGameOver(false);\n            setLevel(1)\n            setScore(0)\n            setUsedArray([]);\n            setCurrentArray(['$', '+', '-', '='])\n            setTotalSymbolArray([])\n          }}\n        >\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOver;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <div className=\"left-footer\">\n        <h3>Made By Luca</h3>\n        <a href=\"https://github.com/Cynto\" rel=\"noreferrer\" target=\"_blank\">\n          <i className=\"fab fa-github\"></i>\n        </a>\n      </div>\n      <div className=\"right-footer\">\n        <h3>GitHub Repository</h3>\n\n        <a\n          href=\"https://github.com/Cynto/memory-game\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          <i className=\"fab fa-github-square\"></i>\n        </a>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport MainContainer from './components/MainContainer';\nimport GameOver from './components/GameOver';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const [totalSymbolArray, setTotalSymbolArray] = useState([]);\n  const [usedSymbolArray, setUsedArray] = useState([]);\n  const [currentSymbolArray, setCurrentArray] = useState(['$', '+', '-', '=']);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(usedSymbolArray.length);\n  const [bestScore, setBestScore] = useState(0);\n  const [level, setLevel] = useState(1);\n\n  const symbolArray = [\n    '$',\n    '+',\n    '-',\n    '=',\n    '!',\n    '@',\n    '#',\n    '^',\n    '%',\n    '&',\n    '*',\n    '(',\n    ')',\n    '_',\n    '}',\n    '{',\n    '|',\n    '/',\n  ];\n\n  useEffect(() => {\n    if (usedSymbolArray.length === currentSymbolArray.length) {\n      setLevel(level + 1);\n      setCurrentArray([]);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [usedSymbolArray]);\n\n  useEffect(() => {\n    const getRandomElement = () => {\n      const randomElement =\n        symbolArray[Math.floor(Math.random() * symbolArray.length)];\n      if (currentSymbolArray.indexOf(randomElement) === -1) {\n        setCurrentArray((oldArray) => [...oldArray, randomElement]);\n      } else getRandomElement();\n      setUsedArray([]);\n    };\n\n    if (currentSymbolArray.length !== level + 3) {\n      getRandomElement();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentSymbolArray]);\n\n  useEffect(() => {\n    setScore(totalSymbolArray.length);\n  }, [totalSymbolArray]);\n\n  useEffect(() => {\n    if (score > bestScore) {\n      setBestScore(score);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [score]);\n\n  return (\n    <div className=\"App\">\n      {!gameOver ? (\n        [\n          <div className=\"total-container\" key={'unique'}>\n            <Header bestScore={bestScore} score={score} />\n            <MainContainer\n              currentSymbolArray={currentSymbolArray}\n              setCurrentArray={setCurrentArray}\n              usedSymbolArray={usedSymbolArray}\n              setUsedArray={setUsedArray}\n              setGameOver={setGameOver}\n              setTotalSymbolArray={setTotalSymbolArray}\n              level={level}\n            />\n            <Footer />\n          </div>,\n        ]\n      ) : (\n        <GameOver\n          bestScore={bestScore}\n          setBestScore={setBestScore}\n          score={score}\n          setScore={setScore}\n          setGameOver={setGameOver}\n          setUsedArray={setUsedArray}\n          setCurrentArray={setCurrentArray}\n          setTotalSymbolArray={setTotalSymbolArray}\n          setLevel={setLevel}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}