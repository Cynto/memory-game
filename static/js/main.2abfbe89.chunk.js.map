{"version":3,"sources":["components/Scoreboard.js","components/Header.js","components/SymbolContainer.js","components/MainContainer.js","components/GameOver.js","App.js","index.js"],"names":["Scoreboard","props","className","score","bestScore","Header","SymbolContainer","currentSymbolArray","setCurrentArray","usedSymbolArray","setUsedArray","setGameOver","setTotalSymbolArray","map","item","onClick","oldArray","randomIndex","currentIndex","length","Math","floor","random","indexOf","uniqid","MainContainer","GameOver","setScore","App","useState","totalSymbolArray","gameOver","setBestScore","symbolArray","useEffect","getRandomElement","randomElement","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2abfbe89.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Scoreboard(props) {\n  return (\n    <div className=\"scoreboard\">\n      <h4>Score: {props.score}</h4>\n      <span>|</span>\n      <h4>Best Score: {props.bestScore}</h4>\n    </div>\n  );\n}\n\nexport default Scoreboard;\n","import React from 'react'\nimport Scoreboard from './Scoreboard'\n\nfunction Header(props) {\n  return (\n    <header>\n      <h1>Symbol Memory Game</h1>\n      <Scoreboard bestScore={props.bestScore} score={props.score}/>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react';\nimport uniqid from 'uniqid';\n\nfunction SymbolContainer(props) {\n  const {\n    currentSymbolArray,\n    setCurrentArray,\n    usedSymbolArray,\n    setUsedArray,\n    setGameOver,\n    setTotalSymbolArray,\n  } = props;\n\n  const shuffle = () => {\n    setCurrentArray((oldArray) => {\n      let currentIndex = oldArray.length,\n        randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        [oldArray[currentIndex], oldArray[randomIndex]] = [\n          oldArray[randomIndex],\n          oldArray[currentIndex],\n        ];\n      }\n      return oldArray;\n    });\n  };\n\n  return (\n    <div className=\"symbol-container\">\n      {currentSymbolArray.map((item) => {\n        return (\n          <div\n            key={uniqid()}\n            className=\"symbol-item\"\n            onClick={() => {\n              shuffle();\n              if (usedSymbolArray.indexOf(item) === -1) {\n                setUsedArray((oldArray) => [...oldArray, item]);\n                setTotalSymbolArray((oldArray) => [...oldArray, item]);\n              } else {\n                setGameOver(true);\n              }\n            }}\n          >\n            {item}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default SymbolContainer;\n","import React from 'react';\nimport SymbolContainer from './SymbolContainer';\n\nfunction MainContainer(props) {\n  return (\n    <div className=\"main-container\">\n      <SymbolContainer\n        currentSymbolArray={props.currentSymbolArray}\n        setCurrentArray={props.setCurrentArray}\n        usedSymbolArray={props.usedSymbolArray}\n        setUsedArray={props.setUsedArray}\n        setGameOver={props.setGameOver}\n        setTotalSymbolArray={props.setTotalSymbolArray}\n      />\n    </div>\n  );\n}\n\nexport default MainContainer;\n","import React from 'react';\n\nfunction GameOver(props) {\n  const { setGameOver, setScore, score, setUsedArray, setCurrentArray, setTotalSymbolArray } = props;\n  return (\n    <div className=\"game-over-screen\">\n      <div>\n        <h1>Game Over!</h1>\n        <h3>Score: {score}</h3>\n        <button\n          onClick={() => {\n            setGameOver(false);\n            setScore(0)\n            setUsedArray([]);\n            setCurrentArray(['$', '+', '-', '='])\n            setTotalSymbolArray([])\n          }}\n        >\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOver;\n","import { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport MainContainer from './components/MainContainer';\nimport GameOver from './components/GameOver';\n\nfunction App() {\n  const [totalSymbolArray, setTotalSymbolArray] = useState([]);\n  const [usedSymbolArray, setUsedArray] = useState([]);\n  const [currentSymbolArray, setCurrentArray] = useState(['$', '+', '-', '=']);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(usedSymbolArray.length);\n  const [bestScore, setBestScore] = useState(0);\n\n  const symbolArray = [\n    '!',\n    '@',\n    '#',\n    '^',\n    '%',\n    '&',\n    '*',\n    '(',\n    ')',\n    '_',\n    '}',\n    '{',\n    '|',\n    '/',\n  ];\n\n  useEffect(() => {\n    if (usedSymbolArray.length === currentSymbolArray.length) {\n      const getRandomElement = () => {\n        const randomElement =\n          symbolArray[Math.floor(Math.random() * symbolArray.length)];\n        if (currentSymbolArray.indexOf(randomElement) === -1) {\n          setCurrentArray((oldArray) => [...oldArray, randomElement]);\n        } else getRandomElement();\n      };\n      getRandomElement();\n\n      setUsedArray([]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [usedSymbolArray]);\n\n  useEffect(() => {\n    setScore(totalSymbolArray.length);\n  }, [totalSymbolArray]);\n\n  useEffect(() => {\n    if (score > bestScore) {\n      setBestScore(score);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [score]);\n\n  return (\n    <div className=\"App\">\n      {!gameOver ? (\n        [\n          <div key={'unique'}>\n            <Header bestScore={bestScore} score={score} />\n            <MainContainer\n              currentSymbolArray={currentSymbolArray}\n              setCurrentArray={setCurrentArray}\n              usedSymbolArray={usedSymbolArray}\n              setUsedArray={setUsedArray}\n              setGameOver={setGameOver}\n              setTotalSymbolArray={setTotalSymbolArray}\n            />\n          </div>,\n        ]\n      ) : (\n        <GameOver\n          bestScore={bestScore}\n          setBestScore={setBestScore}\n          score={score}\n          setScore={setScore}\n          setGameOver={setGameOver}\n          setUsedArray={setUsedArray}\n          setCurrentArray={setCurrentArray}\n          setTotalSymbolArray={setTotalSymbolArray}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}